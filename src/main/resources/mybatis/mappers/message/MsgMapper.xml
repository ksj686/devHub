<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="app.labs.message.dao.MsgRepository">

    <!-- 보낸 메시지 목록 조회 -->
    <select id="getSentMessages" parameterType="String" resultType="app.labs.message.model.Msg">
        SELECT MESSAGE_ID AS messageId,
               SENDER_ID AS senderId,
               RECEIVER_ID AS receiverId,
               TEXT AS text,
               DATE_CREATED AS dateCreated,
               DATE_READ AS dateRead
        FROM SENT_MESSAGE
        WHERE SENDER_ID = #{userId}
        ORDER BY DATE_CREATED DESC
    </select>
    
    <!-- 보낸 메시지 검색 -->
    <select id="sentMsgSearch" parameterType="java.util.Map" resultType="app.labs.message.model.Msg">
        SELECT MESSAGE_ID AS messageId,
               SENDER_ID AS senderId,
               RECEIVER_ID AS receiverId,
               TEXT AS text,
               DATE_CREATED AS dateCreated,
               DATE_READ AS dateRead
        FROM SENT_MESSAGE
        WHERE SENDER_ID = #{userId}
        <choose>
        	<when test='searchFilter.equals("content")'>
        	AND TEXT LIKE '%' || #{searchQuery} || '%'
        	</when>
        	<when test='searchFilter.equals("receiverId")'>
        	AND RECEIVER_ID = #{searchQuery}
        	</when>
        	<when test='searchFilter.equals("senderId")'>
        	AND SENDER_ID = #{searchQuery}
        	</when>
        </choose>
        <!-- <if test='searchFilter.equals("content")'>
			  AND TEXT LIKE CONCAT('%',#{searchQuery},'%')
		</if>
		<if test="searchFilter == 'receiverId'">
			  AND RECEIVER_ID = #{searchQuery}
		</if> -->
        ORDER BY DATE_CREATED DESC
    </select>
    
    <!-- 받은 메시지 검색 -->
    <select id="receivedMsgSearch" parameterType="java.util.Map" resultType="app.labs.message.model.Msg">
        SELECT MESSAGE_ID AS messageId,
               SENDER_ID AS senderId,
               RECEIVER_ID AS receiverId,
               TEXT AS text,
               DATE_CREATED AS dateCreated,
               DATE_READ AS dateRead
        FROM RECEIVED_MESSAGE
        WHERE RECEIVER_ID = #{userId}
        <choose>
        	<when test='searchFilter.equals("content")'>
        	AND TEXT LIKE '%' || #{searchQuery} || '%'
        	</when>
        	<when test='searchFilter.equals("senderId")'>
        	AND SENDER_ID = #{searchQuery}
        	</when>
        </choose>
        <!-- <if test='searchFilter.equals("content")'>
			  AND TEXT LIKE CONCAT('%',#{searchQuery},'%')
		</if>
		<if test="searchFilter == 'receiverId'">
			  AND RECEIVER_ID = #{searchQuery}
		</if> -->
        ORDER BY DATE_CREATED DESC
    </select>

    <!-- 받은 메시지 목록 조회 -->
    <select id="getReceivedMessages" parameterType="String" resultType="app.labs.message.model.Msg">
        SELECT MESSAGE_ID AS messageId,
               SENDER_ID AS senderId,
               RECEIVER_ID AS receiverId,
               TEXT AS text,
               DATE_CREATED AS dateCreated,
               DATE_READ AS dateRead
        FROM RECEIVED_MESSAGE
        WHERE RECEIVER_ID = #{userId}
        ORDER BY DATE_CREATED DESC
    </select>
    
    <!-- 보낸 메시지 상세 조회 -->
    <select id="getSentMsgDetail" parameterType="String" resultType="app.labs.message.model.Msg">
			   
        SELECT MESSAGE_ID AS messageId,
               SENDER_ID AS senderId,
               RECEIVER_ID AS receiverId,
               TEXT AS text,
               DATE_CREATED AS dateCreated,
               DATE_READ AS dateRead
        FROM SENT_MESSAGE
        WHERE MESSAGE_ID = #{messageId}
    </select>

    <!-- 받은 메시지 상세 조회 -->
    <select id="getReceivedMsgDetail" parameterType="String" resultType="app.labs.message.model.Msg">
        SELECT MESSAGE_ID AS messageId,
               SENDER_ID AS senderId,
               RECEIVER_ID AS receiverId,
               TEXT AS text,
               DATE_CREATED AS dateCreated,
               DATE_READ AS dateRead
        FROM RECEIVED_MESSAGE
        WHERE MESSAGE_ID = #{messageId}
    </select>
    
    <!-- 받은 메시지 저장 -->
	<insert id="insertReceivedMsg" parameterType="app.labs.message.model.Msg">
		INSERT INTO RECEIVED_MESSAGE (
			MESSAGE_ID, RECEIVER_ID, SENDER_ID, TEXT
		)
		VALUES (
			#{messageId}, #{receiverId}, #{senderId}, #{text, jdbcType=CLOB}
		)
	</insert>
	
	<!-- 보낸 메시지 저장 -->
	<insert id="insertSentMsg" parameterType="app.labs.message.model.Msg">
		INSERT INTO SENT_MESSAGE (
			MESSAGE_ID, RECEIVER_ID, SENDER_ID, TEXT
		)
		VALUES (
			#{messageId}, #{receiverId}, #{senderId}, #{text, jdbcType=CLOB}
		)
	</insert>
	
	<!-- 보낸 메시지 수신 확인(받은 사람이 읽었을 때 실행됨) -->
    <update id="updateSentMsgReadStatus" parameterType="String">
        UPDATE SENT_MESSAGE
        SET DATE_READ = CURRENT_TIMESTAMP
        WHERE MESSAGE_ID = #{messageId}
        AND DATE_READ IS NULL <!-- DATE_READ가 NULL인 경우에만 업데이트 -->
    </update>
	
	<!-- 받은 메시지 수신 확인 -->
	<update id="updateReceivedMsgReadStatus" parameterType="String">
        UPDATE RECEIVED_MESSAGE
        SET DATE_READ = CURRENT_TIMESTAMP
        WHERE MESSAGE_ID = #{messageId}
        AND DATE_READ IS NULL <!-- DATE_READ가 NULL인 경우에만 업데이트 -->
    </update>
    
    <!-- 받은 메시지 삭제 -->
    <delete id="deleteSent" parameterType="String">
		DELETE FROM SENT_MESSAGE 
		WHERE MESSAGE_ID = #{messageId}
	</delete>
	
	<!-- 보낸 메시지 삭제 -->
	<delete id="deleteReceived" parameterType="String">
		DELETE FROM RECEIVED_MESSAGE 
		WHERE MESSAGE_ID = #{messageId}
	</delete>
	
	<!-- <update id="updateExpiredMember">
		UPDATE MEMBER
			SET USER_STATUS = 'inactive'
		WHERE LAST_LOGIN &lt; ADD_MONTHS(SYSDATE, -12)
				AND 
			USER_STATUS != 'inactive'
	</update> -->
</mapper>
